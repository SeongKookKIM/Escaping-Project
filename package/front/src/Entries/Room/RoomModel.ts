export const roomInfo = [
  {
    id: "room1",
    content:
      "React는 사용자 인터페이스를 효율적으로 렌더링하기 위해 DOM을 직접적으로 업데이트하지 않고, 더 효율적인 구조를 사용합니다. React는 이 구조를 사용하여 상태 변화가 발생할 때마다 변경된 부분만 업데이트하여, 전체 UI를 다시 렌더링하는 데 드는 성능 비용을 줄입니다. 이 구조는 실제 DOM의 가벼운 복사본으로, 메모리 상에서만 존재하며, 변경 사항을 반영하기 전에 두 버전을 비교하여 최소한의 변경만을 실제 DOM에 적용합니다. 이렇게 효율적으로 DOM을 관리하기 위해 사용하는 React의 주요 개념은 무엇인가요?",
    hint: "실제 DOM을 추상화한 가상의 구조입니다.",
  },
  {
    id: "room2",
    content:
      "01000011 01101100 01101001 01100101 01101110 01110100 00101101 01010011 01101001 01100100 01100101 00100000 01010010 01100101 01101110 01100100 01100101 01110010 01101001 01101110 01100111 ",
    hint: "8 2",
  },
  {
    id: "room3",
    content:
      "당신은 리액트로 쇼핑몰 웹사이트를 개발하는 팀의 일원입니다. 팀은 웹사이트의 성능을 최적화하기 위해 몇 가지 기능을 개선하려고 합니다. 특히, 사용자가 제품을 장바구니에 추가할 때마다 호출되는 함수를 최적화하고자 합니다. 현재, 사용자가 제품을 추가할 때마다 호출되는 함수가 매번 재생성되어 불필요한 렌더링이 발생하고 있습니다.팀의 목표는 동일한 함수가 재생성되지 않도록 하여 성능을 최적화하는 것입니다.",
    hint: "memoization",
  },
  {
    id: "room4",
    content:
      "JavaScript에서 변수와 함수 선언이 코드의 맨 위로 끌어올려지는 동작입니다. 변수는 undefined로 초기화되고, 함수는 전체가 끌어올려집니다. 함수 표현식과 변수에 할당된 함수는 끌어올려지지 않으므로 주의가 필요합니다.",
    hint: "root",
  },
  {
    id: "room5",
    content:
      "당신은 웹 애플리케이션을 개발하고 있습니다. 사용자가 버튼을 클릭하면 서버에서 데이터를 받아와 화면에 표시해야 합니다. 이 데이터 요청은 시간이 걸릴 수 있기 때문에, 데이터를 받아오는 동안 사용자 인터페이스가 멈추지 않고 다른 작업을 계속할 수 있어야 합니다. 이러한 상황에서 서버로부터 데이터를 받아오는 작업을 비동기적으로 처리하면서, 작업이 완료될 때까지 기다린 후 결과를 처리하고 싶습니다. 이를 위해 사용할 수 있는 JavaScript의 문법은 무엇입니까?",
    hint: "기존의 비동기 처리 방식인 콜백 함수와 프로미스의 단점을 보완하고 코드 가독성을 좋게 만들어주는 비동기 처리 패턴입니다.",
  },
  {
    id: "room6",
    content:
      "당신은 전자 상거래 웹사이트를 개발하고 있습니다. 이 웹사이트는 상품 목록 조회, 상품 상세 정보 조회, 장바구니 추가, 주문 생성 등의 기능을 제공합니다. 이러한 기능들을 구현하기 위해 서버와 클라이언트 간에 데이터 교환이 필요합니다. 서버는 HTTP 프로토콜을 사용하여 클라이언트의 요청을 받고, 요청에 대한 적절한 응답을 JSON 형식으로 반환합니다. 또한, 서버는 URL 경로와 HTTP 메서드(GET, POST, PUT, DELETE 등)를 활용하여 다양한 자원에 접근하고 조작할 수 있도록 설계되었습니다. 이와 같은 아키텍처 스타일을 무엇이라고 하나요? ",
    hint: "Fake(Go to Home)",
  },
];
